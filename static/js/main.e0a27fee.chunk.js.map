{"version":3,"sources":["components/Display/Display.module.css","components/DisplaySettings/DisplaySettings.module.css","components/Buttons/ButtonIncrement/ButtonIncrement.module.css","components/Buttons/ButtonReset/ButtonReset.module.css","components/Buttons/ButtonSettings/ButtonSettings.module.css","components/Buttons/ButtonIncrement/ButtonIncrement.tsx","components/Buttons/ButtonReset/ButtonReset.tsx","components/Display/Display.tsx","components/Buttons/ButtonSettings/ButtonSettings.tsx","components/DisplaySettings/DisplaySettings.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","ButtonIncrement","counter","increment","maxNumber","startNumber","disabledButton","Number","className","c","buttonIncrBlockStyle","onClick","buttonIncrStyle","disabled","ButtonReset","setCounter","disabledButtonReset","buttonResetBlockStyle","buttonResetStyle","Display","colorNumberStyle","color","borderColor","styleDisplayCounter","display","styleDisplayMessage","displayBlock","style","displayStyle","message","buttonDisplayBlock","ButtonSettings","disabledButtonSettings","useEffect","valueAsString","localStorage","getItem","newValue","JSON","parse","setItem","buttonSettingsStyle","DisplaySettings","setMaxNumber","setStartNumber","valueMax","React","createRef","valueStart","styleInput","displaySettingsBlock","ref","value","inputMax","type","onChange","number","current","inputStart","App","useState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e0a27fee.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonDisplayBlock\":\"Display_buttonDisplayBlock__1McUk\",\"displayStyle\":\"Display_displayStyle__UrngL\",\"displayBlock\":\"Display_displayBlock__1SGAB\",\"counter\":\"Display_counter__3f0F1\",\"message\":\"Display_message__2FA39\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"displaySettingsBlock\":\"DisplaySettings_displaySettingsBlock__3qGaZ\",\"inputMax\":\"DisplaySettings_inputMax__qOMLC\",\"inputStart\":\"DisplaySettings_inputStart__1eeRH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonIncrBlockStyle\":\"ButtonIncrement_buttonIncrBlockStyle__2Hyd0\",\"buttonIncrStyle\":\"ButtonIncrement_buttonIncrStyle__wcd5q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonResetBlockStyle\":\"ButtonReset_buttonResetBlockStyle___NKj0\",\"buttonResetStyle\":\"ButtonReset_buttonResetStyle__2zpjA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonSettingsStyle\":\"ButtonSettings_buttonSettingsStyle__3uc38\"};","import React from \"react\"\r\nimport c from \"./ButtonIncrement.module.css\";\r\n\r\ntype ButtonIncrementPropsType = {\r\n    counter: number\r\n    increment: () => void\r\n    maxNumber: any\r\n    startNumber: any\r\n}\r\n\r\nexport function ButtonIncrement({counter, increment, maxNumber, startNumber}: ButtonIncrementPropsType) {\r\n    let disabledButton = counter === Number(maxNumber) || startNumber < 0 || maxNumber < 0 || startNumber === maxNumber;\r\n\r\n    return (\r\n        <div className={c.buttonIncrBlockStyle}>\r\n            <button onClick={increment}\r\n                    className={c.buttonIncrStyle}\r\n                    disabled={disabledButton}>increment\r\n            </button>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport c from \"./ButtonReset.module.css\";\r\n\r\ntype ButtonResetPropsType = {\r\n    maxNumber: any\r\n    startNumber: any\r\n    counter: number\r\n    setCounter: (number: any) => void\r\n}\r\n\r\nexport function ButtonReset({maxNumber, startNumber, counter, setCounter}: ButtonResetPropsType) {\r\n    let disabledButtonReset = startNumber < 0 || maxNumber < 0 || startNumber === maxNumber\r\n    let reset = () => {\r\n        counter > 0 ? setCounter(startNumber) : setCounter(counter);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={c.buttonResetBlockStyle}>\r\n            <button onClick={reset}\r\n                    className={c.buttonResetStyle}\r\n                    disabled={disabledButtonReset}>reset\r\n            </button>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport c from \"./Display.module.css\";\r\nimport {ButtonIncrement} from \"../Buttons/ButtonIncrement/ButtonIncrement\";\r\nimport {ButtonReset} from \"../Buttons/ButtonReset/ButtonReset\";\r\n\r\ntype PropsDisplay = {\r\n    counter: number\r\n    increment: () => void\r\n    startNumber: any\r\n    maxNumber: any\r\n    setCounter: (number: any) => void\r\n}\r\n\r\nexport function Display({counter, increment, maxNumber, startNumber, setCounter}: PropsDisplay) {\r\n\r\n    let colorNumberStyle = {\r\n        color: counter === Number(maxNumber) ? 'red' : 'aquamarine',\r\n        borderColor: counter === Number(maxNumber) || startNumber === maxNumber || startNumber < 0 || maxNumber < 0 ? 'red' : 'green'\r\n    }\r\n    let styleDisplayCounter = {\r\n        display: counter ? 'block' : 'none'\r\n    }\r\n    let styleDisplayMessage = {\r\n        display: counter ? 'none' : 'block',\r\n        color: startNumber === maxNumber || startNumber < 0 || maxNumber < 0 ? 'darkred' : 'chartreuse',\r\n    }\r\n    let inputValidation = () => {\r\n        if (maxNumber === startNumber || maxNumber < 0 || startNumber < 0) {\r\n            return \"Incorrect value\";\r\n        } else if (maxNumber != 0 || maxNumber > 0) {\r\n            return \"enter values and press 'set' \";\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={c.displayBlock}>\r\n            <div style={colorNumberStyle} className={c.displayStyle}>\r\n\r\n                <div className={c.counter} style={styleDisplayCounter}>\r\n                    {counter}\r\n                </div>\r\n                <div className={c.message} style={styleDisplayMessage}>\r\n                    {inputValidation()}\r\n                </div>\r\n\r\n            </div>\r\n            <div className={c.buttonDisplayBlock}>\r\n                <ButtonIncrement counter={counter}\r\n                                 startNumber={startNumber}\r\n                                 increment={increment}\r\n                                 maxNumber={maxNumber}/>\r\n                <ButtonReset\r\n                    maxNumber={maxNumber}\r\n                    startNumber={startNumber}\r\n                    counter={counter}\r\n                    setCounter={setCounter}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useEffect} from \"react\";\r\nimport c from \"./ButtonSettings.module.css\";\r\n\r\ntype ButtonSettingsPropsType = {\r\n    maxNumber: any\r\n    startNumber: any\r\n    setCounter: (number: any) => void\r\n}\r\n\r\nexport function ButtonSettings({maxNumber, setCounter, startNumber}: ButtonSettingsPropsType) {\r\n\r\n    let disabledButtonSettings = startNumber < 0 || maxNumber < 0 || startNumber === maxNumber;\r\n\r\n    useEffect(() => {\r\n        let valueAsString = localStorage.getItem('startValue')\r\n        if (valueAsString) {\r\n            let newValue = JSON.parse(valueAsString)\r\n            setCounter(newValue);\r\n        }\r\n    }, [])\r\n    useEffect(() => {\r\n        localStorage.setItem('startValue', startNumber)\r\n    }, [startNumber])\r\n\r\n    let settingsSend = () => {\r\n        setCounter(startNumber);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={settingsSend}\r\n                    className={c.buttonSettingsStyle}\r\n                    disabled={disabledButtonSettings}>Setting\r\n            </button>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {ButtonSettings} from \"../Buttons/ButtonSettings/ButtonSettings\";\r\nimport c from \"./DisplaySettings.module.css\";\r\n\r\ntype DisplaySettingsPropsType = {\r\n    setStartNumber: (number: any) => void\r\n    setMaxNumber: (number: any) => void\r\n    startNumber: any\r\n    maxNumber: any\r\n    setCounter: (number: any) => void\r\n}\r\n\r\nexport function DisplaySettings({\r\n                                    startNumber,\r\n                                    maxNumber,\r\n                                    setMaxNumber,\r\n                                    setCounter,\r\n                                    setStartNumber\r\n                                }: DisplaySettingsPropsType) {\r\n\r\n    let valueMax = React.createRef<HTMLInputElement>();\r\n    let valueStart = React.createRef<HTMLInputElement>();\r\n\r\n    let maxValueNumber = () => {\r\n        let number = valueMax.current?.value\r\n        setMaxNumber(number);\r\n    }\r\n    let startValueNumber = () => {\r\n        let number = valueStart.current?.value\r\n        setStartNumber(number);\r\n    }\r\n    let styleInput = {\r\n        color: startNumber === maxNumber || startNumber < 0 || maxNumber < 0 ? 'red' : 'aquamarine',\r\n        borderColor: startNumber === maxNumber || startNumber < 0 || maxNumber < 0 ? 'red' : 'green'\r\n    }\r\n\r\n    return (\r\n        <div className={c.displaySettingsBlock}>\r\n            <div>\r\n                <span>max value :</span> <input ref={valueMax}\r\n                                                value={maxNumber}\r\n                                                className={c.inputMax}\r\n                                                style={styleInput}\r\n                                                type={\"number\"}\r\n                                                onChange={maxValueNumber}/>\r\n            </div>\r\n            <div>\r\n                <span>start value :</span> <input ref={valueStart}\r\n                                                  value={startNumber}\r\n                                                  className={c.inputStart}\r\n                                                  style={styleInput}\r\n                                                  type={\"number\"}\r\n                                                  onChange={startValueNumber}/>\r\n            </div>\r\n            <div>\r\n                <ButtonSettings maxNumber={maxNumber}\r\n                                startNumber={startNumber}\r\n                                setCounter={setCounter}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport {Display} from \"./components/Display/Display\";\r\nimport {DisplaySettings} from \"./components/DisplaySettings/DisplaySettings\";\r\n\r\nfunction App() {\r\n    let [counter, setCounter] = useState(0);\r\n    let [maxNumber, setMaxNumber] = useState('0');\r\n    let [startNumber, setStartNumber] = useState('0');\r\n\r\n    useEffect(() => {\r\n        let valueAsString = localStorage.getItem('maxValue')\r\n        if (valueAsString) {\r\n            let newValue = JSON.parse(valueAsString)\r\n            setMaxNumber(newValue);\r\n        }\r\n    }, [])\r\n    useEffect(() => {\r\n        localStorage.setItem('maxValue', maxNumber);\r\n    }, [maxNumber])\r\n\r\n    let increment = () => {\r\n        counter < Number(maxNumber) ? setCounter(++counter) : setCounter(counter);\r\n    }\r\n\r\n    return (\r\n        <div className='App'>\r\n            <DisplaySettings setMaxNumber={setMaxNumber}\r\n                             setStartNumber={setStartNumber}\r\n                             setCounter={setCounter}\r\n                             maxNumber={maxNumber}\r\n                             startNumber={startNumber}/>\r\n            <Display counter={counter}\r\n                     increment={increment}\r\n                     maxNumber={maxNumber}\r\n                     startNumber={startNumber}\r\n                     setCounter={setCounter} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}