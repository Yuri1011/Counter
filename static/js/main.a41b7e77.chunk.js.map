{"version":3,"sources":["components/Display/Display.tsx","components/ButtonIncrement/ButtonIncrement.tsx","components/ButtonReset/ButtonReset.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Display","props","colorNumber","color","counter","borderColor","className","style","ButtonIncrement","onClick","increment","ButtonReset","back","App","useState","setCounter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAOO,SAASA,EAAQC,GAEpB,IAAIC,EAAc,CACdC,MAAyB,IAAlBF,EAAMG,QAAgB,MAAQ,QACrCC,YAA8B,IAAlBJ,EAAMG,QAAgB,MAAQ,SAG9C,OACI,qBAAKE,UAAU,UAAUC,MAAOL,EAAhC,SACKD,EAAMG,U,MCVZ,SAASI,EAAgBP,GAC5B,OACI,8BACI,wBAAQQ,QAASR,EAAMS,UAAWJ,UAAU,cAA5C,mB,MCHL,SAASK,EAAYV,GACxB,OACI,wBAAQQ,QAASR,EAAMW,KAAMN,UAAU,kBAAvC,mBCsBOO,MAvBf,WAAgB,IAAD,EACmBC,mBAAS,GAD5B,mBACJV,EADI,KACKW,EADL,KAcX,OACI,sBAAKT,UAAU,MAAf,UACI,cAAC,EAAD,CAASF,QAASA,IAClB,cAAC,EAAD,CAAiBM,UAdzB,WACQN,EAAU,GACVW,EAAWX,EAAU,MAarB,cAAC,EAAD,CAAaQ,KAVrB,WACQR,EAAU,GACVW,EAAW,UCHRC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a41b7e77.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './Display.css';\r\n\r\ntype PropsDisplay = {\r\n    counter: number\r\n}\r\n\r\nexport function Display(props: PropsDisplay) {\r\n\r\n    let colorNumber = {\r\n        color: props.counter === 5 ? 'red' : 'black',\r\n        borderColor:props.counter === 5 ? 'red' : 'black'\r\n    }\r\n\r\n    return (\r\n        <div className='display' style={colorNumber}>\r\n            {props.counter}\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport './ButtonIncrement.css'\r\ntype PropsButtonIncrement = {\r\n    increment: () => void\r\n}\r\n\r\nexport function ButtonIncrement(props: PropsButtonIncrement) {\r\n    return (\r\n        <div>\r\n            <button onClick={props.increment} className='buttonStyle'>inc</button>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport './ButtonReset.css'\r\ntype PropsButtonBack = {\r\n    back: () => void\r\n}\r\n\r\nexport function ButtonReset(props: PropsButtonBack) {\r\n    return (\r\n        <button onClick={props.back} className='buttonBackStyle'>reset</button>\r\n    )\r\n}","import React, {useState} from 'react';\nimport './App.css';\nimport {Display} from \"./components/Display/Display\";\nimport {ButtonIncrement} from \"./components/ButtonIncrement/ButtonIncrement\";\nimport {ButtonReset} from \"./components/ButtonReset/ButtonReset\";\n\n\nfunction App() {\n    const [counter, setCounter] = useState(0);\n\n    function increment() {\n        if (counter < 5)\n            setCounter(counter + 1);\n    }\n\n    function back() {\n        if (counter > 0) {\n            setCounter(0);\n        }\n    }\n\n    return (\n        <div className='App'>\n            <Display counter={counter}/>\n            <ButtonIncrement increment={increment}/>\n            <ButtonReset back={back}/>\n        </div>\n    )\n}\n\nexport default App;\n\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}